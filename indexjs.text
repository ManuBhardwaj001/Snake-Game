const playBoard = document.querySelector(".play-board")
const scoreElement = document.querySelector(".score")
const highScoreElement = document.querySelector(".high-score")
const controls = document.querySelector(".controls i")

let gameOver = false;
let foodX, foodY;
let snakeX = 5, snakeY = 5;
let velocityX = 0; let velocityY = 0;
let snakeBody = [];
let setIntervalId;
let score = 0;


//Getting high score from local 
let highScore = localStorage.getItem("high-score") || 0;
highScoreElement.innerText = `High Score ${highScore}`;


//Passing a random value betweeen 1 and 30 as food position
const updateFoodPosition = () => {
    foodX = Math.floor(Math.random() * 30) + 1;
    foodY = Math.floor(Math.random() * 30) + 1;
}


const handleGameOver = () => {
    clearInterval(setIntervalId);
    alert("Game Over! Press OK to replay...")
    location.reload();
}

//Change velocity value based on key press
const changeDirection = e => {
    if (e.key === "ArrowUp" && velocityY != 1) {
        velocityX = 0;
        velocityY = -1;
    }
    else if (e.key === "ArrowDown" && velocityY != -1) {
        velocityX = 0;
        velocityY = -1;
    }
    else if (e.key === "ArrowLeft" && velocityY != 1) {
        velocityX = 0;
        velocityY = -1;
    }
    else if (e.key === "ArrowRight" && velocityY != -1) {
        velocityX = 0;
        velocityY = -1;
    }
}

//Change direction on key press
controls.forEach(button => button.addEventListener("click", () => changeDirection({ key: button.dataset.key })));

const initGame = () => {
    if (gameOver) return handleGameOver();
    let html = `<div class = "food" style="grid-area: ${foodX}/ ${foodY}"></div>`;

    //When snake eats food
    if (snakeX === foodX && snakeY == foodY) {
        updateFoodPosition();
        snakeBody.push([foodX, foodY]); //Adding food to array snakeBody
        score++;
        highScore = score >= highScore ? score : highScore; // if score is > high score  -> score = high score

        localStorage.setItem("high-score", highScore);
        scoreElement.innerText = `Score: ${score}`;
        highScoreElement.innerText = `High Score: ${highScore}`;
    }

    // Update snake head
    snakeX += velocityX;
    snakeY += velocityY;

    //Shifting forward values of elements in snake body by one

    for (let i = snakeBody.length - 1; i > 0; i--) {
        snakeBody[i] = snakeBody[i - 1];
    }

    snakeBody[0] = [snakeX, snakeY];

    //Check whether snake body is out of wall or not
    if (snakeX <= 0 || snakeX > 30 || snakeY <= 0 || snakeY > 30 ){
        return gameOver = true;
    }

    //Add div for each part of snake body
    for(let i = 0; i < snakeBody.length; i++){
        html += `<div class="head" style="grid-area: ${snakeBody[i][1]} / ${snakeBody[i][0]}"></div>`;
        //Check whether snake head hit body or not
        if(i !== 0 && snakeBody[0][1] === snakeBody[i][1] && snakeBody[0][0]===snakeBody[i][0]){
            gameOver = true;
        }
    }

    playBoard.innerHTML = html;
}

updateFoodPosition();
setIntervalId = setInterval(initGame, 100);
document.addEventListener("keyup", changeDirection);